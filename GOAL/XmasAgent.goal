init module {
	knowledge{
		findWall(L1, [ on(Xx,Yy, contains(HL)) |T]) :- findall(Y, (member(X, HL), X = entity(wall), Y = on(Xx,Yy, X)), Tmp), findWall(L2, T), append(Tmp, L2, L1). 
		findWall([], []).
		
		
	}
	
	beliefs{
		% insert initial beliefs here, if any, or remove section.
	}
	
	goals{
		% insert initial goals here, if any, or remove section.
	}
	
	program {
        % insert one-time rules here, or remove section
    }
	
	actionspec{
		move(X,Y) {
			pre {true }
			post {true }
		}
	}
}
	
main module{
	program {
		if true then move(0,0).
	}
}

event module{
	program{
		if bel( percept(speed(X)) ) then insert ( myspeed(X) ).
		
		if bel (percept(vision(X)), findWall(Ws,X) ) then insert (saw(Ws)).
	}
}

% insert additional modules, if any, here.
